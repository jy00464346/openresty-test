user wuhen staff;
worker_processes  auto;        #nginx worker 数量

events {
    worker_connections 1024;
}
http {
    error_log logs/error.log info;   #指定错误日志文件路径

    lua_package_path '$prefix/lua/?.lua;;';
    lua_package_cpath '$prefix/lua/?.so;;';
    lua_code_cache off;

    lua_max_pending_timers 40960;
    lua_max_running_timers 40960;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for" '
    '"$upstream_addr" "$upstream_status" "$upstream_response_time" '
    '$request_time -- $http_cookie -- $cookie_pin';
    access_log logs/access.log main;

    init_by_lua_block {
        init = require 'core.init'
        init:handle()
    }

    init_worker_by_lua_block {
        init_worker:handle()
    }


    #    lua_need_request_body on;

    upstream md5_server {
        server 127.0.0.1:81;
        keepalive 20;
    }
    upstream backend {
        server 0.0.0.1;
        balancer_by_lua_block {
            balancer:handle()
        }
        keepalive 1;
    }


    server {
        server_name test;
        listen 80;

        location / {

            rewrite_by_lua_block{
                rewrite:handle()
            }
            access_by_lua_block {
                access:handle()
            }
            proxy_pass http://backend;

            header_filter_by_lua_block {
                header_filter:handle()
            }

            body_filter_by_lua_block {
                body_filter:handle()
            }
            log_by_lua_block {
                log:handle()
            }
        }
    }

    server {
        listen    81;

        location /spe_md5 {
            content_by_lua_block {
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                ngx.print(ngx.md5(data or '' .. "*&^%$#$^&kjtrKUYG"))
            }
        }
    }
}
